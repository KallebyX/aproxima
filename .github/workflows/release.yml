name: 🎉 Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🏗️ Build Release
  build:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm run test:ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

  # 🐳 Build and Push Docker Image
  docker:
    name: 🐳 Build Release Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 📝 Create GitHub Release
  release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate changelog since last tag
          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🎉 Release Notes
            
            ### Changes in this release:
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🐳 Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### 📊 Metrics
            - ✅ All tests passing
            - ✅ Security scan completed
            - ✅ Performance validated
            - ✅ Accessibility compliance verified
          draft: false
          prerelease: false

  # 🌐 Deploy to Production
  deploy:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: release
    environment:
      name: production
      url: https://aproxima.ufn.edu.br
    steps:
      - name: 🌐 Deploy to production
        run: |
          echo "🌐 Deploying release ${{ github.ref_name }} to production..."
          echo "🎉 Release deployed successfully!"

  # 📢 Notify
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: 📢 Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Release ${{ github.ref_name }} deployed successfully!"
          echo "📊 All systems operational"

      - name: 🚨 Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "🚨 Release ${{ github.ref_name }} deployment failed!"
          echo "📞 Please check logs and notify DevOps team"